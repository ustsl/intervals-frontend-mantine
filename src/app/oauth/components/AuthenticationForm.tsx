'use client'

import styles from './AuthForm.module.css'

import { useRouter } from 'next/navigation';
import { loginUser, registerUser } from '@/api/auth';
import { useAuthStore } from '@/store/oauth.store';
import {
    Anchor,
    Button,
    Group,
    Paper,
    PaperProps,
    PasswordInput,
    Stack,
    Text,
    TextInput,
} from '@mantine/core';
import { useForm } from '@mantine/form';
import { upperFirst, useToggle } from '@mantine/hooks';
import { notifications } from '@mantine/notifications';

// –¢–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
const oauthToggle = {
    login: '–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É',
    register: '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è',
};

export const AuthenticationForm = (props: PaperProps) => {
    const router = useRouter();
    const [type, toggle] = useToggle<'login' | 'register'>(['login', 'register']);
    const form = useForm({
        initialValues: {
            email: '',
            name: '',
            password: '',
            terms: true,
        },
        validate: {
            email: (val) => (/^\S+@\S+$/.test(val) ? null : 'Invalid email'),
            password: (val) =>
                val.length <= 5 ? 'Password should include at least 6 characters' : null,
        },
    });

    const setAuth = useAuthStore((state) => state.setAuth);
    const removeAuth = useAuthStore((state) => state.removeData);

    const handleSubmit = async (values: typeof form.values) => {
        if (type === 'login') {
            const authResult = await loginUser(values.email, values.password);
            if (authResult) {
                setAuth(values.email, values.password, authResult);
                notifications.show({
                    color: "green",
                    title: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞',
                    message: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–∫–∫–∞—É–Ω—Ç! üåü',
                });
                router.push("/account");
            } else {
                notifications.show({
                    title: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
                    message: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å –¥—Ä—É–≥–∏–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏',
                    color: 'red'
                });
                removeAuth();
            }
        } else {
            // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const regResult = await registerUser(values.email, values.password);
            if (regResult) {
                notifications.show({
                    color: "green",
                    title: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞',
                    message: '–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è –≤ —Å–µ—Ä–≤–∏—Å–µ!',
                });
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ñ–æ—Ä–º—É –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                toggle('login');
            } else {
                notifications.show({
                    title: '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
                    message: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑',
                    color: 'red'
                });
            }
        }
    };

    return (
        <Paper radius="md" p="xl" withBorder {...props} className={styles.block}>
            <Text size="lg" fw={500}>
                –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {type === 'login' ? '–≤—Ö–æ–¥–∞' : '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'}
            </Text>

            <form onSubmit={form.onSubmit(handleSubmit)}>
                <Stack>
                    <TextInput
                        required
                        label="–ü–æ—á—Ç–∞"
                        placeholder="example@example.ru"
                        value={form.values.email}
                        onChange={(event) =>
                            form.setFieldValue('email', event.currentTarget.value)
                        }
                        error={form.errors.email && '–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞—è –ø–æ—á—Ç–∞'}
                        radius="md"
                    />

                    <PasswordInput
                        required
                        label="–ü–∞—Ä–æ–ª—å"
                        placeholder="–ü–∞—Ä–æ–ª—å"
                        value={form.values.password}
                        onChange={(event) =>
                            form.setFieldValue('password', event.currentTarget.value)
                        }
                        error={
                            form.errors.password && '–ü–∞—Ä–æ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä–æ—á–µ 6 —Å–∏–º–≤–æ–ª–æ–≤'
                        }
                        radius="md"
                    />
                </Stack>

                <Group justify="space-between" mt="xl">
                    <Anchor
                        component="button"
                        type="button"
                        c="dimmed"
                        onClick={() => toggle()}
                        size="xs"
                    >
                        {type === 'register'
                            ? '–ï—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç? –í–æ–π–¥–∏—Ç–µ'
                            : '–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å'}
                    </Anchor>
                    <Button type="submit" radius="xl">
                        {upperFirst(oauthToggle[type])}
                    </Button>
                </Group>
            </form>
        </Paper>
    );
};
